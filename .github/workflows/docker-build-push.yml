name: Build and Push Docker Images

on:
  push:
    paths:
      - 'sdk/**/Dockerfile'
      - 'sdk/**/version'
      - 'rte/**/Dockerfile'
      - 'rte/**/version'
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Build platformları (comma ile ayırın, örn: linux/amd64,linux/arm64)'
        required: true
        default: 'linux/amd64,linux/arm64'
      image_prefix:
        description: 'Docker image prefix'
        required: true
        default: 'turknethub'
      versions:
        description: 'Build edilecek versiyonlar (comma ile ayırın, örn: dotnet7,java-20,nodejs-22)'
        required: true
        default: 'dotnet7'
      build_all:
        description: 'Tüm Dockerfile''ları build et'
        type: boolean
        default: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get changed directories
        id: changed-dirs
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manuel tetikleme için versions input'unu kullan
            changed_dirs=()
            IFS=',' read -ra BUILD_VERSIONS <<< "${{ github.event.inputs.versions }}"
            
            if [ "${{ github.event.inputs.build_all }}" = "true" ]; then
              changed_dirs=($(find . -name "Dockerfile" -exec dirname {} \;))
            else
              for version in "${BUILD_VERSIONS[@]}"; do
                if [ -d "sdk/$version" ]; then
                  changed_dirs+=("sdk/$version")
                fi
                if [ -d "rte/$version" ]; then
                  changed_dirs+=("rte/$version")
                fi
              done
            fi
          else
            # Push event için değişen dosyaları kontrol et
            changed_files=$(git diff --name-only HEAD^ HEAD)
            changed_dirs=()
            
            while IFS= read -r file; do
              if [[ "$file" == *"Dockerfile"* ]] || [[ "$file" == *"version"* ]]; then
                dir=$(dirname "$file")
                if [[ ! " ${changed_dirs[@]} " =~ " ${dir} " ]]; then
                  changed_dirs+=("$dir")
                fi
              fi
            done <<< "$changed_files"
          fi
          
          # Dizinleri çıktı olarak ayarla
          echo "dirs=${changed_dirs[*]}" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        run: |
          # Değişen dizinleri al
          IFS=' ' read -ra changed_dirs <<< "${{ steps.changed-dirs.outputs.dirs }}"

          for dir in "${changed_dirs[@]}"; do
            dockerfile="$dir/Dockerfile"
            if [ ! -f "$dockerfile" ]; then
              echo "Dockerfile bulunamadı: $dockerfile"
              continue
            fi

            base_dir=$(echo $dir | cut -d'/' -f1)  # sdk veya rte
            version_dir=$(basename $dir)           # örn: dotnet7, java-20
            
            # Image adını oluştur
            if [ "$base_dir" = "sdk" ]; then
              image_name="$version_dir-sdk"
            else
              image_name="$version_dir-runtime"
            fi

            version=$(cat $dir/version)
            full_tag=${{ github.event.inputs.image_prefix || 'turknethub' }}/$image_name:$version-${{ github.run_number }}

            echo "Building $full_tag from $dockerfile..."
            docker buildx build --platform=${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }} \
              --tag $full_tag \
              -f $dockerfile $dir --push
          done