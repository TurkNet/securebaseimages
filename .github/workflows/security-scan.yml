name: Build and Security Scan Docker Images

on:
  workflow_dispatch:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub (Optional)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/download/v0.41.0/trivy_0.41.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.41.0_Linux-64bit.deb

      - name: Build Docker images for all directories and run Trivy scan
        run: |
          find . -name 'Dockerfile' | while read dockerfile; do
            dir=$(dirname "$dockerfile")
            image_name="local-$(basename $dir)"
            echo "Building Docker image for $dir..."
            docker build -t "$image_name" "$dir"
            echo "Running Trivy scan for image $image_name..."
            trivy image --format json -o "$dir/trivy-report.json" "$image_name"
          done

      - name: Parse all Trivy reports and create or update issue
        run: |
          issue_title="Security Vulnerabilities Report"

          # Mevcut issue'yu kontrol etmek için --json ve --jq bayrakları birlikte kullanılıyor
          existing_issue=$(gh issue list --label security --state open --limit 1 --json number --jq '.[0].number')

          if [ -z "$existing_issue" ]; then
            issue_url=$(gh issue create --title "$issue_title" --label "security" --body "New security vulnerabilities found. See the details below.")
            issue_number=$(echo "$issue_url" | cut -d'/' -f 7)
          else
            issue_number="$existing_issue"
          fi

          find . -name 'trivy-report.json' | while read report; do
            dir=$(dirname "$report")
            
            jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[]' "$report" > vulnerabilities.json
            
            if [ -s vulnerabilities.json ]; then
              echo "Vulnerabilities found in $dir:"

              vulnerability_table="**Directory**: $dir \n \n"
              vulnerability_table+="| Library        | Vulnerability   | Severity   | Status  | Installed Version | Fixed Version  | Title  | \n"
              vulnerability_table+="|----------------|-----------------|------------|---------|-------------------|----------------|--------| \n"

              while IFS= read -r vulnerability; do
                vulnerability_table+="| $vulnerability | \n"
              done < <(cat vulnerabilities.json | jq -r '. | "\(.PkgName) | \(.VulnerabilityID) | \(.Severity) | \(.Status // "unknown") | \(.InstalledVersion) | \(.FixedVersion // "N/A") | \(.Title)"')

              vulnerability_table=$(echo -e "$vulnerability_table")

              gh issue comment $issue_number --body "$vulnerability_table"
            else
              echo "No vulnerabilities found in $dir"
            fi
          done
